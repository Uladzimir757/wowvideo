from fastapi import FastAPI, UploadFile, File, Form, Request
from fastapi.responses import HTMLResponse, RedirectResponse
from fastapi.staticfiles import StaticFiles
from pathlib import Path
import shutil
import subprocess
import os
import json
import time

app = FastAPI()

VIDEOS_DIR = Path("videos")
THUMBS_DIR = Path("thumbnails")
META_FILE = Path("videos.json")

VIDEOS_DIR.mkdir(exist_ok=True)
THUMBS_DIR.mkdir(exist_ok=True)

app.mount("/videos", StaticFiles(directory="videos"), name="videos")
app.mount("/thumbnails", StaticFiles(directory="thumbnails"), name="thumbnails")

# –ü–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
translations = {
    "en": {
        "my_videos": "My Videos",
        "upload": "Upload video",
        "watch": "Watch",
        "delete": "Delete",
        "copy": "Copy link",
        "copied": "Copied!",
        "expires": "Expires in",
        "back": "‚Üê Back to list",
        "upload_title": "Upload video",
        "choose_file": "Choose file",
        "storage_period": "Storage period:",
        "upload_btn": "Upload",
        "storage_3h": "3 hours",
        "storage_7h": "7 hours",
        "storage_15h": "15 hours",
        "storage_1d": "1 day",
        "storage_3d": "3 days",
        "terms_link": "By uploading, you agree to the",
        "terms_of_use": "Terms of Use",
        "no_videos": "No uploaded videos yet.",
        "delete_confirm": "Delete",
        "copied_success": "Copied!",
        "share": "Share",
        "lang_en": "en",
        "lang_ru": "ru",
        "remove_in": "Will be deleted in",
        "upload_more": "Upload another",
        "report": "To report abuse, email:",
        "mail": "your@email.com"
    },
    "ru": {
        "my_videos": "–ú–æ–∏ –≤–∏–¥–µ–æ",
        "upload": "–ó–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ",
        "watch": "–°–º–æ—Ç—Ä–µ—Ç—å",
        "delete": "–£–¥–∞–ª–∏—Ç—å",
        "copy": "–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É",
        "copied": "–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!",
        "expires": "–£–¥–∞–ª–∏—Ç—Å—è —á–µ—Ä–µ–∑",
        "back": "‚Üê –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É",
        "upload_title": "–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ",
        "choose_file": "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª",
        "storage_period": "–°—Ä–æ–∫ —Ö—Ä–∞–Ω–µ–Ω–∏—è:",
        "upload_btn": "–ó–∞–≥—Ä—É–∑–∏—Ç—å",
        "storage_3h": "3 —á–∞—Å–∞",
        "storage_7h": "7 —á–∞—Å–æ–≤",
        "storage_15h": "15 —á–∞—Å–æ–≤",
        "storage_1d": "1 —Å—É—Ç–∫–∏",
        "storage_3d": "3 —Å—É—Ç–æ–∫",
        "terms_link": "–ó–∞–≥—Ä—É–∂–∞—è, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å",
        "terms_of_use": "—É—Å–ª–æ–≤–∏—è–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è",
        "no_videos": "–ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ.",
        "delete_confirm": "–£–¥–∞–ª–∏—Ç—å",
        "copied_success": "–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!",
        "share": "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è",
        "lang_en": "en",
        "lang_ru": "ru",
        "remove_in": "–ë—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ —á–µ—Ä–µ–∑",
        "upload_more": "–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥—Ä—É–≥–æ–µ",
        "report": "–î–ª—è –∂–∞–ª–æ–± –ø–∏—à–∏—Ç–µ –Ω–∞ –ø–æ—á—Ç—É:",
        "mail": "your@email.com"
    }
}

def load_meta():
    if META_FILE.exists():
        with open(META_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def save_meta(meta):
    with open(META_FILE, "w", encoding="utf-8") as f:
        json.dump(meta, f)

def cleanup_expired():
    meta = load_meta()
    now = int(time.time())
    changed = False
    for fname in list(meta.keys()):
        expire_at = meta[fname]["uploaded_at"] + meta[fname]["ttl"]
        if now > expire_at:
            vpath = VIDEOS_DIR / fname
            tpath = THUMBS_DIR / (fname + ".jpg")
            if vpath.exists():
                vpath.unlink()
            if tpath.exists():
                tpath.unlink()
            del meta[fname]
            changed = True
    if changed:
        save_meta(meta)
    return meta

def get_lang(request: Request):
    lang = request.query_params.get("lang", "en").lower()
    return "ru" if lang == "ru" else "en"

def url_with_lang(path: str, lang: str):
    if "?" in path:
        return f"{path}&lang={lang}"
    else:
        return f"{path}?lang={lang}"

@app.get("/", response_class=HTMLResponse)
async def index(request: Request):
    lang = get_lang(request)
    tr = translations[lang]
    meta = cleanup_expired()
    now = int(time.time())

    # –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —è–∑—ã–∫–æ–≤
    lang_switch = f"""
    <div class='flex justify-end mb-4'>
        <a href='/?lang=en' class='px-3 py-1 mx-1 rounded {"bg-blue-600 text-white font-bold" if lang=="en" else "bg-gray-200 text-gray-700"}'>en</a>
        <a href='/?lang=ru' class='px-3 py-1 mx-1 rounded {"bg-blue-600 text-white font-bold" if lang=="ru" else "bg-gray-200 text-gray-700"}'>ru</a>
    </div>
    """

    video_items = ""
    for fname, data in meta.items():
        expire_at = data["uploaded_at"] + data["ttl"]
        left = max(expire_at - now, 0)
        hours = left // 3600
        minutes = (left % 3600) // 60
        thumb = f"/thumbnails/{fname}.jpg"
        video_link = f"/videos/{fname}"
        delete_link = f"/delete/{fname}?lang={lang}"
        # –î–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏ (–ø–æ–ª–Ω—ã–π –ø—É—Ç—å)
        host = str(request.base_url).rstrip("/")
        full_video_link = f"{host}{video_link}"
        video_items += f"""
        <div class='bg-white rounded-lg shadow hover:shadow-lg transition p-4'>
            <img src='{thumb}' alt='Preview' class='w-full h-48 object-cover rounded-md mb-4 border' />
            <p class='text-gray-800 font-medium mb-2 truncate'>{fname}</p>
            <div class='text-sm text-gray-500 mb-2'>{tr["remove_in"]}: {hours}h {minutes}m</div>
            <div class='flex flex-wrap gap-2 items-center'>
                <a href='{video_link}' target='_blank' class='bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded text-sm'>
                    ‚ñ∂Ô∏è {tr["watch"]}
                </a>
                <button onclick="navigator.clipboard.writeText('{full_video_link}'); this.textContent='{tr["copied_success"]}'; setTimeout(()=>this.textContent='üìã {tr["copy"]}',1200);" class='bg-gray-200 hover:bg-gray-300 text-gray-700 px-3 py-2 rounded text-xs'>
                    üìã {tr["copy"]}
                </button>
                <form method='post' action='{delete_link}'>
                    <button type='submit' class='bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded text-sm'>
                        üóë {tr["delete_confirm"]}
                    </button>
                </form>
            </div>
        </div>
        """

    terms_bar = f"""
    <div class="mb-4 text-xs text-gray-500 bg-gray-50 border border-gray-200 rounded p-2">
        {tr['terms_link']} <a href="{url_with_lang('/terms', lang)}" target="_blank" class="underline text-blue-600">{tr['terms_of_use']}</a>.
        <br>{tr['report']} <a href="mailto:{tr['mail']}" class="underline text-blue-600">{tr['mail']}</a>
    </div>
    """

    return HTMLResponse(f"""
    <!DOCTYPE html>
    <html lang='{lang}'>
    <head>
      <meta charset='UTF-8' />
      <meta name='viewport' content='width=device-width, initial-scale=1.0' />
      <title>üé• {tr['my_videos']}</title>
      <script src='https://cdn.tailwindcss.com'></script>
    </head>
    <body class='bg-gray-100 font-sans leading-normal tracking-normal'>
      <div class='max-w-5xl mx-auto p-4'>
        {lang_switch}
        <h1 class='text-3xl font-bold text-center text-gray-800 mb-6'>üé• {tr['my_videos']}</h1>
        <div class='flex justify-center mb-6'>
          <a href='{url_with_lang("/upload", lang)}'
             class='bg-blue-600 hover:bg-blue-700 text-white font-semibold py-2 px-4 rounded-lg shadow-md transition'>
            üì§ {tr['upload']}
          </a>
        </div>
        {terms_bar}
        <div class='grid gap-6 sm:grid-cols-1 md:grid-cols-2 lg:grid-cols-3'>
          {video_items if video_items else f"<p class='text-center text-gray-500 mt-10'>{tr['no_videos']}</p>"}
        </div>
      </div>
    </body>
    </html>
    """)

@app.get("/upload", response_class=HTMLResponse)
async def upload_form(request: Request):
    lang = get_lang(request)
    tr = translations[lang]
    lang_switch = f"""
    <div class='flex justify-end mb-4'>
        <a href='/?lang=en' class='px-3 py-1 mx-1 rounded {"bg-blue-600 text-white font-bold" if lang=="en" else "bg-gray-200 text-gray-700"}'>en</a>
        <a href='/?lang=ru' class='px-3 py-1 mx-1 rounded {"bg-blue-600 text-white font-bold" if lang=="ru" else "bg-gray-200 text-gray-700"}'>ru</a>
    </div>
    """

    terms_bar = f"""
    <div class="mb-4 text-xs text-gray-500 bg-gray-50 border border-gray-200 rounded p-2">
        {tr['terms_link']} <a href="{url_with_lang('/terms', lang)}" target="_blank" class="underline text-blue-600">{tr['terms_of_use']}</a>.
        <br>{tr['report']} <a href="mailto:{tr['mail']}" class="underline text-blue-600">{tr['mail']}</a>
    </div>
    """

    return f"""
    <!DOCTYPE html>
    <html lang='{lang}'>
    <head>
        <meta charset='UTF-8'>
        <meta name='viewport' content='width=device-width, initial-scale=1.0'>
        <title>{tr['upload_title']}</title>
        <script src='https://cdn.tailwindcss.com'></script>
    </head>
    <body class='bg-gray-100 font-sans min-h-screen flex items-center justify-center'>
        <div class='bg-white shadow-lg rounded-lg p-8 w-full max-w-md'>
            {lang_switch}
            <h2 class='text-2xl font-bold mb-6 text-gray-800 text-center'>{tr['upload_title']}</h2>
            <form action='{url_with_lang("/upload", lang)}' enctype='multipart/form-data' method='post' class='space-y-4'>
                <input name='file' type='file' accept='video/*' required
                       class='block w-full text-gray-700 border border-gray-300 rounded p-2 focus:ring-2 focus:ring-blue-400'>
                <label class='block text-gray-700 mb-1'>{tr['storage_period']}</label>
                <select name='ttl'
                        class='w-full border border-gray-300 rounded p-2 text-gray-700'>
                    <option value='10800'>{tr['storage_3h']}</option>
                    <option value='25200'>{tr['storage_7h']}</option>
                    <option value='54000'>{tr['storage_15h']}</option>
                    <option value='86400' selected>{tr['storage_1d']}</option>
                    <option value='259200'>{tr['storage_3d']}</option>
                </select>
                <button type='submit'
                        class='w-full bg-blue-600 hover:bg-blue-700 text-white py-2 rounded mt-4 font-semibold shadow transition'>
                    üì§ {tr['upload_btn']}
                </button>
            </form>
            {terms_bar}
            <a href='/?lang={lang}' class='block text-center text-blue-500 mt-6 hover:underline'>{tr['back']}</a>
        </div>
    </body>
    </html>
    """

@app.post("/upload")
async def upload_video(request: Request, file: UploadFile = File(...), ttl: int = Form(...)):
    lang = get_lang(request)
    file_path = VIDEOS_DIR / file.filename
    with open(file_path, "wb") as buffer:
        shutil.copyfileobj(file.file, buffer)

    thumbnail_path = THUMBS_DIR / f"{file.filename}.jpg"
    subprocess.run([
        "ffmpeg",
        "-i", str(file_path),
        "-ss", "00:00:01.000",
        "-vframes", "1",
        str(thumbnail_path)
    ], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

    meta = load_meta()
    meta[file.filename] = {
        "uploaded_at": int(time.time()),
        "ttl": ttl
    }
    save_meta(meta)
    return RedirectResponse(url_with_lang("/", lang), status_code=303)

@app.post("/delete/{filename}")
async def delete_video(request: Request, filename: str):
    lang = get_lang(request)
    video_path = VIDEOS_DIR / filename
    thumb_path = THUMBS_DIR / f"{filename}.jpg"
    if video_path.exists():
        video_path.unlink()
    if thumb_path.exists():
        thumb_path.unlink()
    meta = load_meta()
    if filename in meta:
        del meta[filename]
        save_meta(meta)
    return RedirectResponse(url_with_lang("/", lang), status_code=303)

@app.get("/terms", response_class=HTMLResponse)
async def terms(request: Request):
    lang = get_lang(request)
    tr = translations[lang]
    return f"""
    <!DOCTYPE html>
    <html lang='{lang}'>
    <head>
        <meta charset='UTF-8'>
        <meta name='viewport' content='width=device-width, initial-scale=1.0'>
        <title>{tr['terms_of_use']}</title>
        <script src='https://cdn.tailwindcss.com'></script>
    </head>
    <body class='bg-gray-50 font-sans min-h-screen flex items-center justify-center'>
        <div class='bg-white shadow-lg rounded-lg p-8 w-full max-w-xl'>
            <h2 class='text-2xl font-bold mb-6 text-gray-800'>{tr['terms_of_use']}</h2>
            <p class='mb-6'>
            {'By uploading any materials to this service, you agree that:' if lang == 'en' else '–ó–∞–≥—Ä—É–∂–∞—è –ª—é–±—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –Ω–∞ —ç—Ç–æ—Ç —Å–µ—Ä–≤–∏—Å, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å —Ç–µ–º, —á—Ç–æ:'}
            <ul class='list-disc pl-6 mb-4 text-gray-700'>
                <li>{'You do not upload illegal, offensive or copyright-infringing content' if lang == 'en' else '–ù–µ —Ä–∞–∑–º–µ—â–∞–µ—Ç–µ –Ω–µ–∑–∞–∫–æ–Ω–Ω—ã–π, –æ—Å–∫–æ—Ä–±–∏—Ç–µ–ª—å–Ω—ã–π –∏–ª–∏ –Ω–∞—Ä—É—à–∞—é—â–∏–π –∞–≤—Ç–æ—Ä—Å–∫–∏–µ –ø—Ä–∞–≤–∞ –∫–æ–Ω—Ç–µ–Ω—Ç'}</li>
                <li>{'All responsibility for uploaded content lies with the user' if lang == 'en' else '–í—Å—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ª–µ–∂–∏—Ç –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ'}</li>
                <li>{'Administration reserves the right to remove any file without explanation and upon complaint from third parties' if lang == 'en' else '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–æ —É–¥–∞–ª–∏—Ç—å –ª—é–±–æ–π —Ñ–∞–π–ª –±–µ–∑ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –ø—Ä–∏—á–∏–Ω –∏ –ø–æ –∂–∞–ª–æ–±–µ —Ç—Ä–µ—Ç—å–∏—Ö –ª–∏—Ü'}</li>
                <li>{'To report violations or request removal, email:' if lang == 'en' else '–î–ª—è –∂–∞–ª–æ–± –∏ —É–¥–∞–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –ø–∏—à–∏—Ç–µ –Ω–∞ –ø–æ—á—Ç—É:'} <a href='mailto:{tr['mail']}' class='underline text-blue-600'>{tr['mail']}</a></li>
            </ul>
            </p>
            <hr class='mb-6'>
            <h3 class='text-xl font-semibold mb-2 text-gray-700'>Privacy / –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å</h3>
            <p>
            {'We do not collect any personal data. All videos are automatically deleted after the specified storage period or upon request. Data can be removed at any time upon your request.' if lang == 'en'
              else '–ú—ã –Ω–µ —Å–æ–±–∏—Ä–∞–µ–º –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –í—Å–µ –≤–∏–¥–µ–æ —É–¥–∞–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–ª–∏ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É. –î–∞–Ω–Ω—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω—ã –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç.'}
            </p>
            <a href='/?lang={lang}' class='block text-center text-blue-500 mt-6 hover:underline'>{tr['back']}</a>
        </div>
    </body>
    </html>
    """

